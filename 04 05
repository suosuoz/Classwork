---
title: "5"
author: "Matthew Matsuo"
date: "2/25/19"
output: html_document
---


2. __An IEEE 754 Mini-Floating Point number [20 points, 2pts each part]___


```c
0 0000 00000
```

a. __What is the bias that would be used for the exponent? What is the largest positive exponent? What is the most negative exponent?__

Bias = 7. Positive exp = 7. Negative exp = -6. 

b. __How would the value 5.5 be stored in this system?__

0 1001 01100 

c. __What value would the following bit sequence represent `0 0111 00000`?__

1

d. __What value would the following bit sequence represent `0 0111 00001`? (Express as a fraction and also in decimal.)__

33/32 or 1.03125

e. __What is the smallest positive normalized value that can be expressed? (Fill in the bits. Express as a fraction and also in decimal.)__

`0 0001 00000`

1.0 x 2^-6
1/64 or .015625

f. __What is the smallest positive (denormalized) non-zero value that can be expressed? (Fill in the bits. Express as a fraction and also in decimal.)__

`0 0000 00001`

0.00001 x 2^-6
1/2048 or .00048828125

g. __What is the largest denormalized value that can be expressed? (Fill in the bits. Express as a fraction and also in decimal.)__

`0 0000 11111`

0.11111 x 2^-6
31/2048 or .0151367188

h. __What is the largest finite value that can be expressed with this sytem? (Fill in the bits. Express as a fraction and also in decimal.)__

`0 1110 11111`

1.11111 x 2^7
252

i. __The machine epsilon is the size of the smallest increment that we can differentiate between two adjacent values in the mantissa (regardless of the exponent). Values with a difference smaller than machine epsilon are seen as equivalent in floating point. For our system, it is equivalent to the difference between your answer to parts c and d above: 1/32. If you ask R for  `.Machine$double.eps`, you get 2.220446e-16. What power of 2 is that equal to?__

-52

h. __With our 10 bit floating point system, the machine epsilon is 1/32. What will the following return? (Hint: can you represent the left-hand side with a sequence of bits that is different from the right-hand side?).__

(1 + 1/64) == 1
TRUE

(1 - 1/64) == 1
FALSE

3. __Root Finding with Fixed Point Iteration [12 points, 2 points each part]__


* Do part (a) using x0 = 1
* Do part (a) using x0 = 3
* Do part (a) using x0 = 6
* Do part (b) using x0 = 2 
* Do part (c) using x0 = 2 
* Do part (d) using x0 = 2, no more than 6 iterations

**note that parts b, c, d are all ways of rewriting f(x) = log(x) - exp(-x) = 0 as g(x) = x**


```{r, error = TRUE}
library(ggplot2)
fixedpoint_show <- function(ftn, x0, iter = 5){
  # applies fixed-point method to find x such that ftn(x) = x
  # ftn is a user-defined function

  # df_points is used to track each update
  # it will be used to plot the line segments showing each update
  # each line segment connects the points (x1,y1) to (x2,y2)
  df_points <- data.frame(x1=numeric(0),y1=numeric(0),x2=numeric(0),y2=numeric(0))
  
  xnew <- x0
  cat("Starting value is:", xnew, "\n")
  
  # iterate the fixed point algorithm
  for(i in 1:iter){
    xold <- xnew
    xnew <- ftn(xold)
    cat("Next value of x is:", xnew, "\n")
    
    df_points[2*i-1,] <- c(xold, xold, xold, xnew) # vertical (x1 = x2)
    df_points[2*i,  ] <- c(xold, xnew, xnew, xnew) # horizontal (y1 = y2)
  }

  ### use ggplot to plot the function and the segments for each iteration
  # determine the limits to use for the plot
  plot_start <- min(df_points$x1, df_points$x2, x0) - 0.1  # start is the min of these values. 
                                                       # we subtract .1 to provide a small margin
  plot_end <- max(df_points$x1, df_points$x2, x0) + 0.1   # end is the max of these values
  
  x <- seq(plot_start, plot_end, length.out = 200)
  fx <- rep(NA, length(x))
  for (i in seq_along(x)) {
    fx[i] <- ftn(x[i])
  }
  
  function_data <- data.frame(x, fx) # dataframe containing the function
  
  p <- ggplot(function_data, aes(x = x, y = fx)) + 
    geom_line(colour = "blue", size=1) +  # plot the function
    geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2), data = df_points) + # plot the segments
                                              # we specify that a different data frame is used here
    geom_abline(intercept = 0, slope = 1) + # plot the line y = x
    coord_equal() 
  
  print(p) # produce the plot
  return(xnew)
}

## Part a, x0 = 1
f <- function(x) cos(x)
fixedpoint_show(f, 1, iter=10)
fixedpoint_show(f, 3, iter=10)
fixedpoint_show(f, 6, iter=10)

##Part b
f <- function(x) exp(exp(-x))
fixedpoint_show(f, 2, iter=10)

##Part c
f <- function(x) x - log(x) + exp(-x)
fixedpoint_show(f, 2, iter=10)

##Part d
f <- function(x) x + log(x) - exp(-x)
fixedpoint_show(f, 2, iter=6)
```





4. __Root Finding with Newton Raphson [22 points, 11 points for writing the code, 1 point for each graph parts a-d]__

* part (a) using x0 = 1, 3, 6  Results should be similar to finding fixed point of cos(x)
* part (b) using x0 = 2        Results should be similar to finding fixed point of exp(exp(-x))
* part (c) using x0 = 0
* part (d) using x0 = 1.1, 1.3, 1.4, 1.5, 1.6, 1.7 (should be simple. just repeat the command several times )


```{r, error = TRUE}
newtonraphson_show <- function(ftn, x0, iter = 5) {
  # applies Newton-Raphson to find x such that ftn(x)[1] == 0
  # ftn is a function of x. it returns two values, f(x) and f'(x)
  # x0 is the starting point
  
  # df_points is used to track each update
  df_points <- data.frame(x1=numeric(0),y1=numeric(0),x2=numeric(0),y2=numeric(0))
  
  xnew <- x0
  cat("Starting value is:", xnew, "\n")
  
  # the algorithm
  for(i in 1:iter){
    xold <- xnew
    f_xold <- ftn(xold)
    xnew <- xold - f_xold[1]/f_xold[2]
    cat("Next x value:", xnew, "\n")
    
    # the line segments. You will need to replace the NAs with the appropriate values
    df_points[2*i-1,] <- c(xold, 0, xold, f_xold[1]) # vertical segment 
    df_points[2*i,] <- c(xold, f_xold[1], xnew, 0)   # tangent segment 
  }
  
  
  plot_start <- min(df_points$x1, df_points$x2, x0) - 0.1  # start is the min of these values. 
                                                       # we subtract .1 to provide a small margin
  plot_end <- max(df_points$x1, df_points$x2, x0) + 0.1   # end is the max of these values
  
  x <- seq(plot_start, plot_end, length.out = 200)
  fx <- rep(NA, length(x))
  for (i in seq_along(x)) {
    fx[i] <- ftn(x[i])[1]
  }
  function_data <- data.frame(x, fx)
  p <- ggplot(function_data, aes(x=x,y=fx)) + 
    geom_line(colour = "blue",size=1) +
    geom_segment(aes(x=x1,y=y1,xend=x2,yend=y2), data=df_points)+
    geom_abline(intercept=0, slope=0, lwd=1)
  
  print(p)
  
  return(xnew)
}


## Part a
# example of how your functions could be written
a <- function(x){
  value <- cos(x) - x   # f(x)
  derivative <- -sin(x) - 1  # f'(x)
  return(c(value, derivative))
} 
newtonraphson_show(a, 1, iter = 8)
newtonraphson_show(a, 3, iter = 8)
newtonraphson_show(a, 6, iter = 8)

##Part b
b <- function(x){
  value <- log(x)-exp(-x)
  derivative <- exp(-x)+(1/x)
  return(c(value,derivative))
}
newtonraphson_show(b, 2, iter=8)

##Part c
zzy <- function(x){
  value <-  x^3 - x - 3
  derivative <- ((3)*(x^2)) - 1
  return(c(value,derivative))
}
newtonraphson_show(zzy, 0, iter=8)

##Part D
zzyz <- function(x){
  value <-  x^3 - 7*x^2 +14*x - 8
  derivative <- ((3)*(x^2)) - 14*x + 14
  return(c(value,derivative))
}
newtonraphson_show(zzyz, 1.1, iter=8)
newtonraphson_show(zzyz, 1.3, iter=8)
newtonraphson_show(zzyz, 1.4, iter=8)
newtonraphson_show(zzyz, 1.5, iter=8)
newtonraphson_show(zzyz, 1.6, iter=8)
newtonraphson_show(zzyz, 1.7, iter=8)

```


5. __Root Finding with Secant Method [26 points- 20 points for completing the code. 2 pts each graph]__


```{r}
secant_show <- function(ftn, x0, x1, iter = 5) {

  df_points <- data.frame(x0=numeric(0),y0=numeric(0),x1=numeric(0),y1=numeric(0))
  
  xnew <- x0
  x1new <- x1
  
  cat("Starting values are:", xnew, x1new, "\n")
  
  # the algorithm
  for(i in 1:iter){
    xold <- xnew
    x1old <- x1new
    f_xold <- ftn(xold)
    f_x1old <- ftn(x1old)
    x1new <- x1old - (f_x1old/((f_xold-f_x1old)/(xold-x1old)))
    xnew <- x1old
    
    cat("Next x value:", x1new, "\n")
    
    df_points[3*i-2,] <- c(xold, f_xold, x1old, f_x1old[1])
    df_points[3*i-1,] <- c(x1old, f_x1old, xnew, 0)  
    df_points[3*i,] <- c(x1new, 0, x1new, 0)  
  }
  
  
  plot_start <- min(df_points$x1, df_points$x2, x0) - 0.1  # start is the min of these values. 
                                                       # we subtract .1 to provide a small margin
  plot_end <- max(df_points$x1, df_points$x2, x0) + 0.1   # end is the max of these values
  
  x <- seq(plot_start, plot_end, length.out = 200)
  fx <- rep(NA, length(x))
  for (i in seq_along(x)) {
    fx[i] <- ftn(x[i])
  }
  
  
  
  function_data <- data.frame(x, fx)
  p <- ggplot(function_data, aes(x=x,y=fx)) + 
    geom_line(colour = "blue",size=1) +
    geom_segment(aes(x=x0,y=y0,xend=x1,yend=y1), data=df_points)+
    geom_abline(intercept=0, slope=0)
  
  print(p)
  
  return(x1new)
}


a <- function(x) cos(x) - x
secant_show(a, 1, 2)

b <- function(x) log(x) - exp(-x)
secant_show(b, 1, 2)

d <- function(x) x^2 - .5
secant_show(d, 4, 3.5)

```


6. __Coordinate Descent Algorithm for Optimization [20 points]__

__Write code to perform coordinate descent to minimize the following function:__

$$g(x,y) = 5 x ^ 2 - 6 x y + 5 y ^ 2$$

```{r}
g <- function(x,y) { 
    5 * x ^ 2 - 6 * x * y + 5 * y ^ 2
}
x <- seq(-1.5,1, len=100)
y <- seq(-1.5,1, len=100)
```

Requirements for this task:

1) Your search space for the golden search can be limited to the range -1.5 to 1.5 for both the x and y directions.
2) For your starting point, use x = -1.5, and y = -1.5.
3) For the first step, hold y constant, and find the minimum in the x direction.
4) Plot the segments showing each 'step' of the algorithm onto the contour plot.
5) After each full iteration, print out the current values of x and y. Hint: after your first full iteration, the next location should be (-0.9, -0.54).
6) Stop after 15 full iterations, or if the difference between one x and the next is less then `1e-5`. The true minimum is at (0,0). Your code should come close to that.

My complete solution is 12 lines. Of course yours might be longer, but that should give you an idea of how complicated it needs to be.

```{r}
df <- data.frame(x = rep(x, each = 100), y = rep(y, 100), z = outer(x,y,g)[1:100^2])
pl <- ggplot(df, aes(x=x,y=y,z=z)) + geom_contour(binwidth = 0.9, boundary = 0.5)

tolerance <- 1e-5
x_i <- -1.5
y_i <- -1.5
xnew <- x_i
ynew <- y_i
xold <- -1.5
yold <- -1.5

xxx <- matrix(c(rep(NA,30)),ncol=2,nrow=15)
xxx[1,] <- -1.5
for(i in 1:15){
  cat(xnew,",", ynew, "\n")
  gx <- function(x) return(g(x, ynew))
  xnew <- golden(gx, -1.5, 1.5, tolerance = 1e-5)
  
  gy <- function(y) return(g(xnew, y))
  ynew <- golden(gy, -1.5, 1.5, tolerance = 1e-5)
  
  if(abs(xnew - x_i) < tolerance){    break}
  
  pl <- pl + 
    geom_point(aes_string(x=xnew, y=ynew)) +
    geom_segment(aes_string(x = xold, y = yold, xend = xnew, yend = yold)) +
    geom_segment(aes_string(x = xnew, y = yold, xend = xnew, yend = ynew))

  xxx[i+1,1] <- xnew
  xxx[i+1,2] <- ynew
  
  xold <- xnew
  yold <- ynew
  x_i <- xnew
  y_i <- ynew
}
print(pl)
```



